Golang in an hour
A talk for Torino Coding Society
11 May 2015

Gianfranco Reppucci
Software developer, Qurami
gianfranco.reppucci@qurami.net
http://qurami.com
@giefferre


* Hello World!

.image img/giefferre.jpg 250 _

- Software developer [[http://qurami.com][@Qurami]]
- Founder [[http://meetup.com/AppsterdamMilan][@AppsterdamMilan]]
- Golang developer & enthusiast


* Disclaimer

Code crusaders? No, thanks

.image img/codecrusader.jpg 400 _


* Disclaimer (cont.)

We'll talk about a potential replacement for C or Java, not for PHP


* Development evolution

- From _monolithic_code_ to _microservices_
- From "all-inclusive frameworks" to bootstrapping frameworks with dependency managers
- From C to ?


* Context

- There is a lot of different programming languages available to developers
- Some of them are pretty easy, some others have great performances
- We can find frameworks, plugins and extensions for each of them


* Start using something modern

* 

.image img/gopher_yellow.png 300 _

.caption *Go*is*an*open*source*programming*language*
.caption *that*makes*it*easy*to*build*simple,*reliable*and*efficient*software.*
.caption quote from golang.org


* Agenda

- Introduction
- Basics
- Go is about composition
- Parallelism and synchronization
- What I learned
# - Tips & Tricks
- Reference


* Introduction

* History

- *2007*: first experiment
- *2009*: public launch
- *2011*: integration in Google App Engine
- *2012*: release of version 1
- *2015*: support for mobile devices _(_v._>=_1.5)_


* Batteries included

- Lightweight runtime components (garbage collector, scheduler, etc.)
- Two compilers (gc or gccgo)
- Plenty of standard libraries
- Documentation
- Formatter

# compiled, strongly typed language, featuring advanced tools
# simple: easily readable code
# reliable: it's open sourced, it is secure, but it's backed from big G
# efficient: made for performance


* Key points

- Absolutely genuine
- Performance driven
- (Quite) Easy to use


* Advantages

- Syntax and environments are similar to dynamic languages
- Simple language specification
- Powerful and lightweight

* 

.image img/biplane.jpg 300 _

.caption *Go*sits*somewhere*between*C*and*Python.*
.caption *It*has*the*static*type*checking*and*bit-twiddling*powers*of*C,*
.caption *yet*much*of*the*speed*of*development*and*conciseness*of*Python*
.caption quote from Graham King


* Basics

* First things first

.play code/helloworld.go


* First things first (cont.)

.play code/helloworld.go

- _package_ determines the namespace
- it CANNOT be omitted
- if you are not writing a package, it shall be *main*


* First things first (cont.)

    import "fmt"

 

    import (
        "fmt"
        "net/http"
        "code.google.com/p/goconf/conf"
        "github.com/garyburd/redigo/redis"
    )

- _import_ loads one or more packages
- packages could be imported even remotely, from Googlecode or Github


* Variables and scope

.code code/variables.go /START1/,/STOP1/

is equivalent to:

.code code/variables.go /START2/,/STOP2/

Check it out:

.play code/variables.go /START3/,/STOP3/


* Variables and scope (cont.)

Be aware of the scope!

.play code/scope.go /START1/,/STOP1/


* Methods

Methods are declared with the keyword *func* as follows:

.play code/methods.go /START1/,/STOP1/


* Error handling

There is no exception, only errors

    file, err := os.Open(filePath)
    if err != nil {
        return err
    }

    codeUsing(file)

*PRO*: easily readable code
*CON*: error handling is 100% up to you


* Go is about composition

* Structs

While Java or C are about _inheritance_, Go is about _composition_

Go is Object Oriented, but not in the usual way

In fact:
- No class inheritance
- No method or operator overloading
- No circular dependencies among packages


* The Person struct

Let's define the struct _Person_

.code code/structs.go /START1/,/STOP1/

With its own methods...

.code code/structs.go /START2/,/STOP2/


* The Person struct (cont.)

And of course a constructor-like factory method:

.code code/structs.go /START3/,/STOP3/


* The Person struct (cont.)

We'll use the struct Person as follows:

.code code/structs.go /START7/,/STOP7/
.code code/structs.go /START8/,/STOP8/


* The Student struct

Let's *compose* a new struct _Student_ by using the previous struct:

.code code/structs.go /START4/,/STOP4/
.code code/structs.go /START5/,/STOP5/


* The Student struct (cont.)

And constructor as usual:

.code code/structs.go /START6/,/STOP6/


* Putting it all together

As simple as that:

.play code/structs.go /START9/,/STOP9/


* Parallelism and synchronization


* Goroutines

A _goroutine_ is a lightweight thread.

To launch a goroutine, use the *go* keyword before a function.

.play code/goroutines.go /START1/,/STOP1/


* Goroutines (cont.)

Goroutines can also use anonymouse methods

.play code/goroutines_anon.go /START1/,/STOP1/


* Channels

Channels allow you to pass data between running goroutines.

They can be _buffered_ or _unbuffered_.

You can build a channel from any kind of data structure!

    ch := make(chan int)

    // insert a value into the channel
    ch <- 5

    // read data from the channel
    var readValue int
    readValue = <-ch

    // readValue is 5


* The beacon

.play code/channels.go /START1/,/STOP1/


* Select

The _select_ statement is like a switch statement, but it selects over channel operations using a first-come, first-served logic.

It is useful to implement synchronization!


* The beacon, using select

.play code/select.go /START1/,/STOP1/


* What I learned


* PROs

- Go is *really* readable
- Concurrency is super-easy
- Your application ships within a single binary file - no extra dependencies!
- Your application runs on (almost) any platform
- Explicit is better than implicit


* Warnings

- Be aware of error handling
- Sometimes you'll write real "low-level" code


* CONs

- No generics, sorry
- Package versioning is not handled at all


* From an entrepreneur's point of view

- The language is born and supported from Google
- [[https://github.com/golang/go/wiki/GoUsers][The list of Golang users is growing up extremely fast]], you're not alone
- The learning curve is quite high, but you'll have better programmers


* Reference

.link http://reneefrench.blogspot.com The gopher images, by Renee French
.link http://matt.aimonetti.net/posts/2013/08/27/what-technology-should-my-startup-use What technology should my startup use?, by Matt Aimonetti
.link http://www.darkcoding.net/software/go-lang-after-four-months/ Go after four months, by Graham King
.link http://blog.iron.io/2013/03/how-we-went-from-30-servers-to-2-go.html How we went from 30 servers to 2, by Travis Reeder
.link http://blog.iron.io/2013/08/go-after-2-years-in-production.html Go after 2 years in production, by Travis Reeder
.link http://www.slideshare.net/jpetazzo/docker-and-go-why-did-we-decide-to-write-docker-in-go Docker and Go: why did we decide to write docker in Go?